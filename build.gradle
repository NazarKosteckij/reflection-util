buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java-library'
	id 'jacoco'
	id 'eclipse'
	id 'idea'

	id 'maven'
	id 'maven-publish'
	id 'org.sonarqube' version '2.6.2'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'com.github.kt3k.coveralls' version '2.8.2'
	id 'info.solidsoft.pitest' version '1.3.0'
}

group = 'de.cronn'

version = "2.2.0"

if (System.env.BUILD_NUMBER) {
	version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

jacocoTestReport {
	reports {
		html.enabled = false
		xml.enabled = true
		csv.enabled = false
	}
	dependsOn test
}

pitest {
	timestampedReports = false
	outputFormats = ['XML', 'HTML']
}

tasks.withType(JavaCompile) {
	options.incremental = true
}

wrapper {
	gradleVersion = "5.0"
	distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

def pomConfig = {
	licenses {
		license {
			name "The Apache Software License, Version 2.0"
			url "http://www.apache.org/licenses/LICENSE-2.0.txt"
			distribution "repo"
		}
	}

	developers {
		developer {
			id "benedikt.waldvogel"
			name "Benedikt Waldvogel"
			email "benedikt.waldvogel@cronn.de"
		}
		developer {
			id "mark.s.fischer"
			name "Mark S. Fischer"
			email "reflection-util.x.msf@spam-en.de"
		}
	}

	scm {
		url "https://github.com/cronn-de/reflection-util"
	}
}

publishing {
	publications {
		CronnPublication(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			groupId project.group
			artifactId project.name
			version project.version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'Java Reflection Utility Classes')
				root.appendNode('name', project.name)
				root.appendNode('url', 'https://github.com/cronn-de/reflection-util')
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

	publications = ['CronnPublication']
	dryRun = false
	pkg {
		repo = 'maven'
		name = rootProject.name
		userOrg = 'cronn'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/cronn-de/reflection-util'
		issueTrackerUrl = 'https://github.com/cronn-de/reflection-util/issues'
		vcsUrl = 'https://github.com/cronn-de/reflection-util.git'
		version {
			name = project.version
			released = new Date()
		}
	}
	override = true
}

ext {
	byteBuddyVersion = "1.9.5"
	objenesisVersion = "3.0.1"
	jsr305Version = "3.0.2"
	slf4jVersion = "1.7.25"
	junitVersion = "4.12"
	logbackVersion = "1.2.3"
	mockitoVersion = "2.23.4"
	assertJVersion = "3.11.1"
	validationApiVersion = "2.0.1.Final"
	cglibVersion = "3.2.9"
	javassistVersion = "3.24.0-GA"
	equalsVerifierVersion = "3.0.3"
}

dependencies {
	api "com.google.code.findbugs:jsr305:${jsr305Version}"
	implementation "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
	implementation "org.objenesis:objenesis:${objenesisVersion}"
	implementation "org.slf4j:slf4j-api:${slf4jVersion}"

	testImplementation "junit:junit:${junitVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "org.assertj:assertj-core:${assertJVersion}"
	testImplementation "javax.validation:validation-api:${validationApiVersion}"
	testImplementation "cglib:cglib:${cglibVersion}"
	testImplementation "org.javassist:javassist:${javassistVersion}"
	testImplementation "nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}"

	testRuntimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
	testRuntimeOnly "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
}
